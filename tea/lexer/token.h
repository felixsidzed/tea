#pragma once

#include "tea.h"

namespace tea {
	enum TokenType : uint8_t {
		TOKEN_STRING,
		TOKEN_INT,
		TOKEN_FLOAT,
		TOKEN_DOUBLE,
		TOKEN_CHAR,

		TOKEN_IDENTF,
		TOKEN_KWORD,
		TOKEN_ATTR,

		TOKEN_LPAR,
		TOKEN_RPAR,
		TOKEN_SEMI,
		TOKEN_COMMA,
		TOKEN_SCOPE,
		TOKEN_COLON,
		TOKEN_DOT,

		TOKEN_ASSIGN,

		TOKEN_SUB,
		TOKEN_ADD,
		TOKEN_MUL,
		TOKEN_DIV,

		TOKEN_ARROW,
		TOKEN_REF,

		TOKEN_EQ,
		TOKEN_NEQ,
		TOKEN_LT,
		TOKEN_GT,
		TOKEN_LE,
		TOKEN_GE, 

		TOKEN_NOT,
		TOKEN_AND,
		TOKEN_OR,

		TOKEN_EOF
	};

	enum KeywordType : uint8_t {
		/* ORDER KWORD */

		KWORD_USING, KWORD_IMPORT,
		//KWORD_MACRO,
		KWORD_PUBLIC, KWORD_PRIVATE,
		KWORD_IF, KWORD_ELSE, KWORD_ELSEIF, KWORD_DO, /*KWORD_WHILE, KWORD_FOR, KWORD_BREAK, KWORD_CONTINUE,*/
		KWORD_FUNC, KWORD_RETURN,
		KWORD_END,
		KWORD_VAR,
		KWORD_STDCC, KWORD_FASTCC, KWORD_CCC,
		//KWORD_CLASS, KWORD_NEW, KWORD_CTOR, KWORD_DTOR,
	};

	struct Token {
		enum TokenType type;
		const std::string value;
		int extra;

		uint32_t length;
		uint32_t column;
		uint32_t line;
	};
}
